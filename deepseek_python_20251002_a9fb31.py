# -*- coding: utf-8 -*-
"""
Projeto de Automa√ß√£o e An√°lise de Dados - Cear√° Transparente
Automa√ß√£o para extra√ß√£o e an√°lise de dados de contratos e conv√™nios
"""

# =============================================================================
# 1. IMPORTANDO BIBLIOTECAS NECESS√ÅRIAS
# =============================================================================

import requests
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import json
import warnings
import time
from sqlalchemy import create_engine
import sqlite3

# Configura√ß√µes de visualiza√ß√£o
plt.style.use('default')
sns.set_palette("husl")
warnings.filterwarnings('ignore')

# =============================================================================
# 2. PAR√ÇMETROS E CONFIGURA√á√ïES
# =============================================================================

# URLs das APIs base (sem par√¢metros de pagina√ß√£o)
BASE_URL_CONVENIOS = 'https://api-dados-abertos.cearatransparente.ce.gov.br/transparencia/contratos/convenios'
BASE_URL_CONTRATOS = 'https://api-dados-abertos.cearatransparente.ce.gov.br/transparencia/contratos/contratos'

# Par√¢metros de data para filtro
params = {
    'data_assinatura_inicio': '01/01/2024',
    'data_assinatura_fim': '31/12/2024'
}

# =============================================================================
# 3. FUN√á√ïES PARA COLETA DE DADOS
# =============================================================================

def fazer_requisicao_api(url, params=None):
    """
    Faz requisi√ß√£o para a API e retorna os dados
    
    Parameters:
    url (str): URL da API
    params (dict): Par√¢metros da requisi√ß√£o
    
    Returns:
    dict: Dados da resposta da API
    """
    try:
        response = requests.get(url, params=params, timeout=30)
        response.raise_for_status()  # Levanta exce√ß√£o para erros HTTP
        
        print(f"‚úÖ Requisi√ß√£o bem-sucedida para: {url}")
        return response.json()
    
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def extrair_todas_paginas(url_base, params, max_paginas=10):
    """
    Extrai dados de todas as p√°ginas dispon√≠veis na API
    
    Parameters:
    url_base (str): URL base da API
    params (dict): Par√¢metros da requisi√ß√£o
    max_paginas (int): N√∫mero m√°ximo de p√°ginas a extrair
    
    Returns:
    list: Lista com todos os registros
    """
    todos_dados = []
    
    for pagina in range(1, max_paginas + 1):
        print(f"üìÑ Extraindo p√°gina {pagina}...")
        
        # Adiciona par√¢metro de p√°gina
        params_pagina = params.copy()
        params_pagina['page'] = pagina
        
        dados = fazer_requisicao_api(url_base, params_pagina)
        
        if dados and 'data' in dados and dados['data']:
            todos_dados.extend(dados['data'])
            print(f"   ‚úÖ {len(dados['data'])} registros extra√≠dos")
            
            # Verifica se h√° mais p√°ginas
            if len(dados['data']) < 15:  # Supondo 15 registros por p√°gina
                print("üèÅ √öltima p√°gina alcan√ßada")
                break
                
            # Pequena pausa para n√£o sobrecarregar a API
            time.sleep(0.5)
        else:
            print("üö´ Nenhum dado encontrado ou fim dos dados")
            break
    
    print(f"üéØ Total de registros extra√≠dos: {len(todos_dados)}")
    return todos_dados

# =============================================================================
# 4. EXTRA√á√ÉO DE DADOS - CONV√äNIOS
# =============================================================================

print("=" * 60)
print("üöÄ INICIANDO EXTRA√á√ÉO DE DADOS - CONV√äNIOS")
print("=" * 60)

# Extraindo dados de conv√™nios
dados_convenios = extrair_todas_paginas(BASE_URL_CONVENIOS, params, max_paginas=5)

# Convertendo para DataFrame
if dados_convenios:
    df_convenios = pd.DataFrame(dados_convenios)
    print(f"üìä DataFrame Conv√™nios criado: {df_convenios.shape}")
else:
    df_convenios = pd.DataFrame()
    print("‚ö†Ô∏è  Nenhum dado de conv√™nios extra√≠do")

# =============================================================================
# 5. EXTRA√á√ÉO DE DADOS - CONTRATOS
# =============================================================================

print("\n" + "=" * 60)
print("üöÄ INICIANDO EXTRA√á√ÉO DE DADOS - CONTRATOS")
print("=" * 60)

# Extraindo dados de contratos
dados_contratos = extrair_todas_paginas(BASE_URL_CONTRATOS, params, max_paginas=5)

# Convertendo para DataFrame
if dados_contratos:
    df_contratos = pd.DataFrame(dados_contratos)
    print(f"üìä DataFrame Contratos criado: {df_contratos.shape}")
else:
    df_contratos = pd.DataFrame()
    print("‚ö†Ô∏è  Nenhum dado de contratos extra√≠do")

# =============================================================================
# 6. EXPLORA√á√ÉO INICIAL DOS DADOS
# =============================================================================

print("\n" + "=" * 60)
print("üîç EXPLORA√á√ÉO INICIAL DOS DADOS")
print("=" * 60)

# Fun√ß√£o para explorar dados
def explorar_dataframe(df, nome):
    """
    Fun√ß√£o para explorar um DataFrame
    """
    print(f"\nüìã EXPLORA√á√ÉO: {nome}")
    print("-" * 40)
    
    if df.empty:
        print("DataFrame vazio")
        return
    
    print(f"üìê Dimens√µes: {df.shape}")
    print(f"üìù Colunas: {list(df.columns)}")
    print("\nüìä Informa√ß√µes b√°sicas:")
    print(df.info())
    
    print("\nüî¢ Estat√≠sticas descritivas:")
    print(df.describe())
    
    print("\nüîç Primeiras linhas:")
    print(df.head(3))

# Explorando os DataFrames
explorar_dataframe(df_convenios, "CONV√äNIOS")
explorar_dataframe(df_contratos, "CONTRATOS")

# =============================================================================
# 7. PR√â-PROCESSAMENTO E LIMPEZA DE DADOS
# =============================================================================

print("\n" + "=" * 60)
print("üßπ PR√â-PROCESSAMENTO E LIMPEZA DE DADOS")
print("=" * 60)

def preprocessar_dados(df, tipo):
    """
    Fun√ß√£o para pr√©-processar os dados
    
    Parameters:
    df (DataFrame): DataFrame a ser processado
    tipo (str): Tipo de dados ('convenios' ou 'contratos')
    
    Returns:
    DataFrame: DataFrame processado
    """
    if df.empty:
        return df
    
    df_clean = df.copy()
    
    # Convertendo colunas de data
    colunas_data = ['data_assinatura', 'data_processamento', 'data_termino']
    for coluna in colunas_data:
        if coluna in df_clean.columns:
            df_clean[coluna] = pd.to_datetime(df_clean[coluna], errors='coerce')
    
    # Convertendo colunas num√©ricas
    colunas_valores = ['valor_contrato', 'valor_aditivo', 'valor_empenhado', 
                      'valor_ajuste', 'valor_pago', 'valor_original_concedente',
                      'valor_original_contrapartida']
    
    for coluna in colunas_valores:
        if coluna in df_clean.columns:
            df_clean[coluna] = pd.to_numeric(df_clean[coluna], errors='coerce')
    
    print(f"‚úÖ Dados {tipo} pr√©-processados")
    return df_clean

# Aplicando pr√©-processamento
df_convenios_clean = preprocessar_dados(df_convenios, 'conv√™nios')
df_contratos_clean = preprocessar_dados(df_contratos, 'contratos')

# =============================================================================
# 8. AN√ÅLISE EXPLORAT√ìRIA DE DADOS (AED)
# =============================================================================

print("\n" + "=" * 60)
print("üìä AN√ÅLISE EXPLORAT√ìRIA DE DADOS (AED)")
print("=" * 60)

def criar_visualizacoes(df, tipo):
    """
    Cria visualiza√ß√µes para an√°lise explorat√≥ria
    """
    if df.empty:
        print(f"‚ö†Ô∏è  Nenhum dado dispon√≠vel para {tipo}")
        return
    
    # Configura√ß√£o para m√∫ltiplos gr√°ficos
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle(f'An√°lise Explorat√≥ria - {tipo.upper()}', fontsize=16, fontweight='bold')
    
    # 1. Distribui√ß√£o de valores (se existir coluna de valor)
    colunas_valor = [col for col in df.columns if 'valor' in col.lower()]
    if colunas_valor:
        # Pegando a primeira coluna de valor dispon√≠vel
        coluna_valor = colunas_valor[0]
        valores_validos = df[coluna_valor].dropna()
        
        if not valores_validos.empty:
            axes[0, 0].hist(valores_validos, bins=20, edgecolor='black', alpha=0.7)
            axes[0, 0].set_title(f'Distribui√ß√£o de {coluna_valor.replace("_", " ").title()}')
            axes[0, 0].set_xlabel('Valor (R$)')
            axes[0, 0].set_ylabel('Frequ√™ncia')
            axes[0, 0].ticklabel_format(style='plain', axis='x')
    
    # 2. Contagem por √≥rg√£o (top 10)
    if 'orgao' in df.columns:
        top_orgaos = df['orgao'].value_counts().head(10)
        axes[0, 1].barh(range(len(top_orgaos)), top_orgaos.values)
        axes[0, 1].set_yticks(range(len(top_orgaos)))
        axes[0, 1].set_yticklabels(top_orgaos.index, fontsize=8)
        axes[0, 1].set_title('Top 10 √ìrg√£os com Mais Contratos/Conv√™nios')
        axes[0, 1].set_xlabel('Quantidade')
    
    # 3. Evolu√ß√£o temporal por m√™s (se existir data)
    if 'data_assinatura' in df.columns:
        df['mes_assinatura'] = df['data_assinatura'].dt.to_period('M')
        contratos_por_mes = df['mes_assinatura'].value_counts().sort_index()
        
        axes[1, 0].plot(range(len(contratos_por_mes)), contratos_por_mes.values, marker='o')
        axes[1, 0].set_title('Evolu√ß√£o de Contratos/Conv√™nios por M√™s')
        axes[1, 0].set_xlabel('M√™s')
        axes[1, 0].set_ylabel('Quantidade')
        axes[1, 0].set_xticks(range(len(contratos_por_mes)))
        axes[1, 0].set_xticklabels([str(x) for x in contratos_por_mes.index], rotation=45)
    
    # 4. Modalidade de licita√ß√£o (se existir)
    if 'descricao_modalidade' in df.columns:
        modalidades = df['descricao_modalidade'].value_counts()
        axes[1, 1].pie(modalidades.values, labels=modalidades.index, autopct='%1.1f%%', startangle=90)
        axes[1, 1].set_title('Distribui√ß√£o por Modalidade de Licita√ß√£o')
    
    plt.tight_layout()
    plt.show()
    
    # Estat√≠sticas adicionais
    print(f"\nüìà ESTAT√çSTICAS PARA {tipo.upper()}:")
    print("-" * 40)
    
    if colunas_valor:
        coluna_principal = colunas_valor[0]
        print(f"üí∞ Valor total: R$ {df[coluna_principal].sum():,.2f}")
        print(f"üìä Valor m√©dio: R$ {df[coluna_principal].mean():,.2f}")
        print(f"üéØ Valor m√°ximo: R$ {df[coluna_principal].max():,.2f}")
        print(f"üìâ Valor m√≠nimo: R$ {df[coluna_principal].min():,.2f}")
    
    print(f"üìÖ Per√≠odo analisado: {params['data_assinatura_inicio']} a {params['data_assinatura_fim']}")
    print(f"üî¢ Total de registros: {len(df)}")

# Criando visualiza√ß√µes
criar_visualizacoes(df_convenios_clean, 'Conv√™nios')
criar_visualizacoes(df_contratos_clean, 'Contratos')

# =============================================================================
# 9. AN√ÅLISE COMPARATIVA ENTRE CONTRATOS E CONV√äNIOS
# =============================================================================

print("\n" + "=" * 60)
print("üîÑ AN√ÅLISE COMPARATIVA")
print("=" * 60)

if not df_convenios_clean.empty and not df_contratos_clean.empty:
    # Encontrando coluna comum de valor para compara√ß√£o
    coluna_valor_conv = next((col for col in df_convenios_clean.columns if 'valor' in col.lower() and col in df_convenios_clean.columns), None)
    coluna_valor_contr = next((col for col in df_contratos_clean.columns if 'valor' in col.lower() and col in df_contratos_clean.columns), None)
    
    if coluna_valor_conv and coluna_valor_contr:
        # Criando gr√°fico comparativo
        fig, ax = plt.subplots(figsize=(10, 6))
        
        categorias = ['Conv√™nios', 'Contratos']
        valores_totais = [
            df_convenios_clean[coluna_valor_conv].sum(),
            df_contratos_clean[coluna_valor_contr].sum()
        ]
        
        barras = ax.bar(categorias, valores_totais, color=['skyblue', 'lightcoral'])
        ax.set_title('Compara√ß√£o: Valor Total - Conv√™nios vs Contratos')
        ax.set_ylabel('Valor Total (R$)')
        ax.ticklabel_format(style='plain', axis='y')
        
        # Adicionando valores nas barras
        for barra, valor in zip(barras, valores_totais):
            altura = barra.get_height()
            ax.text(barra.get_x() + barra.get_width()/2., altura,
                   f'R$ {valor:,.2f}', ha='center', va='bottom')
        
        plt.tight_layout()
        plt.show()
        
        print("üìä RESUMO COMPARATIVO:")
        print(f"   Conv√™nios: {len(df_convenios_clean)} registros | Valor total: R$ {valores_totais[0]:,.2f}")
        print(f"   Contratos: {len(df_contratos_clean)} registros | Valor total: R$ {valores_totais[1]:,.2f}")

# =============================================================================
# 10. ARMAZENAMENTO EM BANCO DE DADOS
# =============================================================================

print("\n" + "=" * 60)
print("üíæ ARMAZENAMENTO EM BANCO DE DADOS")
print("=" * 60)

def salvar_em_banco(df_convenios, df_contratos):
    """
    Salva os dados em um banco SQLite
    """
    try:
        # Criando conex√£o com SQLite
        conn = sqlite3.connect('ceara_transparente.db')
        
        # Salvando DataFrames
        if not df_convenios.empty:
            df_convenios.to_sql('convenios', conn, if_exists='replace', index=False)
            print("‚úÖ Dados de conv√™nios salvos no banco")
        
        if not df_contratos.empty:
            df_contratos.to_sql('contratos', conn, if_exists='replace', index=False)
            print("‚úÖ Dados de contratos salvos no banco")
        
        conn.close()
        print("üíæ Banco de dados 'ceara_transparente.db' criado com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar no banco: {e}")

# Salvando em banco de dados
salvar_em_banco(df_convenios_clean, df_contratos_clean)

# =============================================================================
# 11. SALVANDO EM ARQUIVOS CSV
# =============================================================================

print("\n" + "=" * 60)
print("üìÅ SALVANDO EM ARQUIVOS CSV")
print("=" * 60)

# Salvando DataFrames em arquivos CSV
if not df_convenios_clean.empty:
    df_convenios_clean.to_csv('convenios_ceara_transparente.csv', index=False, encoding='utf-8')
    print("‚úÖ Arquivo 'convenios_ceara_transparente.csv' salvo")

if not df_contratos_clean.empty:
    df_contratos_clean.to_csv('contratos_ceara_transparente.csv', index=False, encoding='utf-8')
    print("‚úÖ Arquivo 'contratos_ceara_transparente.csv' salvo")

# =============================================================================
# 12. RELAT√ìRIO FINAL E INSIGHTS
# =============================================================================

print("\n" + "=" * 60)
print("üìã RELAT√ìRIO FINAL E INSIGHTS")
print("=" * 60)

print("\nüéØ RESUMO EXECUTIVO DO PROJETO:")
print("-" * 40)
print("""
Este projeto realizou a automa√ß√£o da coleta, processamento e an√°lise de 
dados de contratos e conv√™nios do portal Cear√° Transparente, seguindo 
as defini√ß√µes do dicion√°rio de dados fornecido.

üìà PRINCIPAIS ETAPAS CONCLU√çDAS:

1. ‚úÖ Automa√ß√£o da coleta via API
2. ‚úÖ Processamento e limpeza dos dados  
3. ‚úÖ An√°lise explorat√≥ria com visualiza√ß√µes
4. ‚úÖ Armazenamento em banco de dados
5. ‚úÖ Gera√ß√£o de relat√≥rios e insights

üîç PRINCIPAIS VARI√ÅVEIS ANALISADAS (conforme dicion√°rio):

‚Ä¢ Concedente/Financiador: Origem dos recursos
‚Ä¢ √ìrg√£o/Secretaria: Unidades gestoras
‚Ä¢ Modalidade: Forma de licita√ß√£o
‚Ä¢ Valores: Contrato, aditivo, empenhado, pago, etc.
‚Ä¢ Datas: Assinatura, processamento, t√©rmino
‚Ä¢ Objeto: Descri√ß√£o do que est√° sendo contratado

üí° RECOMENDA√á√ïES:

1. Monitorar regularmente os valores atualizados vs originais
2. Analisar a rela√ß√£o entre valores empenhados e pagos
3. Identificar padr√µes nas modalidades de licita√ß√£o
4. Acompanhar a distribui√ß√£o temporal dos contratos
5. Verificar a ader√™ncia aos prazos estabelecidos

üîÑ PR√ìXIMOS PASSOS SUGERIDOS:

‚Ä¢ Expandir an√°lise para per√≠odos hist√≥ricos
‚Ä¢ Implementar alertas para outliers e anomalias
‚Ä¢ Desenvolver dashboard interativo
‚Ä¢ Integrar com outras fontes de dados de transpar√™ncia
""")

# =============================================================================
# 13. VALIDA√á√ÉO E QUALIDADE DOS DADOS
# =============================================================================

print("\n" + "=" * 60)
print("üîé VALIDA√á√ÉO E QUALIDADE DOS DADOS")
print("=" * 60)

def validar_qualidade_dados(df, nome):
    """
    Realiza valida√ß√£o da qualidade dos dados
    """
    if df.empty:
        print(f"‚ö†Ô∏è  Nenhum dado para validar em {nome}")
        return
    
    print(f"\nüìã VALIDA√á√ÉO - {nome}:")
    print(f"   Total de registros: {len(df)}")
    print(f"   Colunas: {len(df.columns)}")
    
    # Verificando valores nulos
    nulos = df.isnull().sum()
    colunas_com_nulos = nulos[nulos > 0]
    
    if not colunas_com_nulos.empty:
        print("   ‚ö†Ô∏è  Colunas com valores nulos:")
        for coluna, qtd_nulos in colunas_com_nulos.items():
            percentual = (qtd_nulos / len(df)) * 100
            print(f"      ‚Ä¢ {coluna}: {qtd_nulos} ({percentual:.1f}%)")
    else:
        print("   ‚úÖ Nenhum valor nulo encontrado")
    
    # Verificando duplicatas
    duplicatas = df.duplicated().sum()
    if duplicatas > 0:
        print(f"   ‚ö†Ô∏è  Registros duplicados: {duplicatas}")
    else:
        print("   ‚úÖ Nenhum registro duplicado")

# Validando qualidade dos dados
validar_qualidade_dados(df_convenios_clean, "CONV√äNIOS")
validar_qualidade_dados(df_contratos_clean, "CONTRATOS")

print("\n" + "=" * 60)
print("üéâ PROJETO CONCLU√çDO COM SUCESSO!")
print("=" * 60)
print("""
Os dados foram coletados, processados, analisados e armazenados conforme
o projeto definido. O processo est√° pronto para ser expandido e otimizado.

üìÅ ARQUIVOS GERADOS:
‚Ä¢ ceara_transparente.db (banco SQLite)
‚Ä¢ convenios_ceara_transparente.csv
‚Ä¢ contratos_ceara_transparente.csv

üöÄ PR√ìXIMOS PASSOS: 
Execute novamente para atualizar os dados ou expanda a an√°lise conforme necess√°rio.
""")